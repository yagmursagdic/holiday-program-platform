plugins {
    id "java"
    id("io.micronaut.application") version "4.5.3"
    id("com.gradleup.shadow") version "8.3.6"
    id("io.micronaut.test-resources") version "4.5.3"
    id("io.micronaut.aot") version "4.5.3"
}

version = "0.1"
group = "at.fhv"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation("jakarta.validation:jakarta.validation-api")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    implementation("io.micronaut.openapi:micronaut-openapi-annotations")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.persistence:jakarta.persistence-api")
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    runtimeOnly("org.yaml:snakeyaml")
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut.test:micronaut-test-junit5")  // Micronaut testing support
    testImplementation("io.micronaut.data:micronaut-data-hibernate-jpa")  // Hibernate for testing
    testRuntimeOnly("com.h2database:h2")  // H2 database for testing
    testImplementation("org.mockito:mockito-core:4.8.0")  // Updated Mockito for mocking
    testImplementation("org.mockito:mockito-inline:4.8.0")  // For mocking final and static methods
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")  // Updated JUnit5
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.0")
}

test {
    useJUnitPlatform()
}

application {
    mainClass = "at.fhv.Application"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("at.fhv.*")
    }
    testResources {
        enabled = false
    }
    aot {
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}